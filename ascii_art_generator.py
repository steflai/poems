# -*- coding: utf-8 -*-
"""ascii_art_generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bZyVfRBcgixAo4i0VYOCtYXvbWFKoX2z
"""

!sudo pip install pillow

from PIL import Image
import numpy as np

gscale1 = "$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~i!lI;:,\"^`. "    #70 levels of gray
gscale2 = "@%#*+=-:. "         #10 levels of gray

fileName = "addoil.jpg"
cols = 100
scale = 1
  
  # open image and convert to grayscale
image = Image.open(fileName).convert('L')
    # store dimensions
W, H = image.size[0], image.size[1]
    # compute width of tile
w = W/cols
    # compute tile height based on aspect ratio and scale
h = w/scale
    # compute number of rows
rows = int(H/h)
print (rows)

#Given PIL Image, return average value of grayscale value
def getAverageL(image):
    # get image as numpy array
    im = np.array(image)
    # get shape
    w,h = im.shape
    # get average
    return np.average(im.reshape(w*h))

# ascii image is a list of character strings
aimg = []
moreLevels = False
    # generate list of dimensions
for j in range(rows):
  y1 = int(j*h)
  y2 = int((j+1)*h)
        # correct last tile
  if j == rows-1: 
      y2 = H
  # append an empty string
  aimg.append("")
  for i in range(cols):
  # crop image to tile
      x1 = int(i*w)
      x2 = int((i+1)*w)
  # correct last tile
      if i == cols-1:
        x2 = W
  # crop image to extract tile
      img = image.crop((x1, y1, x2, y2))
  # get average luminance
      avg = int(getAverageL(img))
  # look up ascii char
      if moreLevels:                       
        gsval = gscale1[int((avg*69)/255)]
      else:
        gsval = gscale2[int((avg*9)/255)]
  # append ascii char to string
      aimg[j] += gsval

outFile = "ascii_addoil.txt"

# open a new text file
f = open(outFile, 'w')
# write each string in the list to the new file
for row in aimg:
    f.write(row + '\n')
# clean up
f.close()

"""based on tutorial https://www.geeksforgeeks.org/converting-image-ascii-image-python/

accessed June 30 2020
"""